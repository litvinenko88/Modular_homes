import { useState, useEffect, useRef } from "react";
import styles from "./ProductionProcess.module.css";

const ProductionProcess = () => {
  const [visibleSteps, setVisibleSteps] = useState(new Set());
  const sectionRef = useRef(null);
  const stepsRef = useRef([]);

  const steps = [
    {
      id: 1,
      title: "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
      description:
        "–°–æ–∑–¥–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π 3D-–º–∞–∫–µ—Ç –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏ –∫–∞–∂–¥–æ–π –ø–∞–Ω–µ–ª–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ CADwork.",
      icon: "üìê",
    },
    {
      id: 2,
      title: "–†–∞—Å–∫—Ä–æ–π –∏ –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
      description:
        "–ê–≤—Ç–æ–º–∞—Ç —Ä–∞—Å–∫—Ä–∞–∏–≤–∞–µ—Ç –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–º–µ—Ä–Ω–æ–π —Å—É—à–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è.",
      icon: "üîß",
    },
    {
      id: 3,
      title: "–°–±–æ—Ä–∫–∞ –∫–∞—Ä–∫–∞—Å–∞",
      description:
        "–†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å–±–∏–≤–∞–µ—Ç –ø—Ä–æ—á–Ω—ã–π –∫–∞—Ä–∫–∞—Å –∏–∑ –¥–≤—É—Ç–∞–≤—Ä–æ–≤—ã—Ö –±–∞–ª–æ–∫.",
      icon: "üèóÔ∏è",
    },
    {
      id: 4,
      title: "–û–±—à–∏–≤–∫–∞ –ì–°–ü",
      description: "–ö–∞—Ä–∫–∞—Å –æ–±—à–∏–≤–∞–µ—Ç—Å—è —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–π –≥–∏–ø—Å–æ—Å—Ç—Ä—É–∂–µ—á–Ω–æ–π –ø–ª–∏—Ç–æ–π.",
      icon: "üõ°Ô∏è",
    },
    {
      id: 5,
      title: "–ú–æ–Ω—Ç–∞–∂ –ø–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏",
      description: "–£–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –ø–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–µ–º–±—Ä–∞–Ω–∞ ¬´–ò–∑–æ—Å–ø–∞–Ω¬ª.",
      icon: "üí®",
    },
    {
      id: 6,
      title: "–£–∫–ª–∞–¥–∫–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è",
      description:
        "–ü–ª–æ—Ç–Ω–æ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–µ–≥–æ—Ä—é—á–∏–π –±–∞–∑–∞–ª—å—Ç–æ–≤—ã–π —É—Ç–µ–ø–ª–∏—Ç–µ–ª—å Rockwool.",
      icon: "üß±",
    },
    {
      id: 7,
      title: "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π",
      description:
        "–ú–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –ø—É—Ç–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π.",
      icon: "‚ö°",
    },
    {
      id: 8,
      title: "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞",
      description: "–ö–∞–∂–¥–∞—è –ø–∞–Ω–µ–ª—å –º–∞—Ä–∫–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–±–æ—Ä–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ.",
      icon: "üì¶",
    },
    {
      id: 9,
      title: "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞",
      description:
        "–ò–Ω–∂–µ–Ω–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –ø–∞–Ω–µ–ª—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.",
      icon: "‚úÖ",
    },
  ];

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const stepId = parseInt(entry.target.dataset.stepId);
            setTimeout(() => {
              setVisibleSteps((prev) => new Set([...prev, stepId]));
            }, stepId * 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
          }
        });
      },
      { threshold: 0.2, rootMargin: "0px 0px -50px 0px" }
    );

    stepsRef.current.forEach((step) => {
      if (step) observer.observe(step);
    });

    return () => observer.disconnect();
  }, []);

  return (
    <section className={styles.section} ref={sectionRef}>
      <div className={styles.container}>
        <div className={styles.header}>
          <div className={styles.badge}></div>
          <h2 className={styles.title}>
            –ù–µ–º–µ—Ü–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
          </h2>
          <p className={styles.subtitle}>
            –û—Ç —á–µ—Ä—Ç–µ–∂–∞ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–º–∞: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
          </p>
          <p className={styles.description}>
            –ù–∞—à –∑–∞–≤–æ–¥—Å–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–∫–ª—é—á–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã—Å–æ—á–∞–π—à–µ–µ
            –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –¥–æ–º–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–º–µ—Ü–∫–æ–µ
            –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ Weinmann –∏ –æ—Ç–±–æ—Ä–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            –¥–æ–º–æ–≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞.
          </p>
        </div>

        <div className={styles.processGrid}>
          {steps.map((step, index) => (
            <div
              key={step.id}
              ref={(el) => (stepsRef.current[index] = el)}
              data-step-id={step.id}
              className={`${styles.processItem} ${
                visibleSteps.has(step.id) ? styles.visible : ""
              }`}>
              <div className={styles.stripe}>
                <div className={styles.content}>
                  <div className={styles.iconContainer}>
                    <span className={styles.stepNumber}>{step.id}</span>
                    <span className={styles.stepIcon}>{step.icon}</span>
                  </div>
                  <div className={styles.textContent}>
                    <h3 className={styles.stepTitle}>{step.title}</h3>
                    <p className={styles.stepDescription}>{step.description}</p>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className={styles.footer}>
          <p className={styles.guarantee}>
            üèÜ –≠—Ç–æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤–∞—à –º–æ–¥—É–ª—å–Ω—ã–π –¥–æ–º
            –±—É–¥–µ—Ç —Ç–µ–ø–ª—ã–º, —Ç–∏—Ö–∏–º, —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É
            –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ.
          </p>
        </div>
      </div>
    </section>
  );
};

export default ProductionProcess;
